version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
    #   # Add parameter here none  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
    #   # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command is here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl --insecure  https://kvdb.io/3CGwxq5apaCdRvB1ToTBdP/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
  install-aws-cli-1:
    description: Installing aws cli-1
    steps:
      - run: 
          name: Install aws-cli-1
          command: |
            sudo apt-get update
            sudo apt-get install awscli

  install-aws-cli-2:
    description: Installing aws cli-2 
    steps:
      - run: 
          name: update sudo
          command: |
            sudo apt-get update
      - run: 
          name: Install Awscli-v2
          command:  | 
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm test

                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm test

            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Front-end audit
          command: |
            cd frontend
            npm install
            npm audit fix --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Back-end audit
          command: |
            cd backend
            npm install
            npm audit fix --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image : amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=your-tag \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"   
            
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible/
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment      

  # used aws-cli-1 here
  configure-infrastructure:
    docker:
      - image: python:3.9-alpine3.17
    steps:
      - checkout 
      
      - add_ssh_keys:
          fingerprints: ["c7:a1:83:a9:f7:78:fe:6e:8c:e3:d5:10:7d:77:01:18"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies (aws-cli)
          command: |
            apk add aws-cli
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt configure-server.yml      
      - destroy-environment    
  

  run-migrations:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - install-aws-cli-1
      - run: 
          name: Install packages for backend
          command: |
            cd backend 
            npm install 
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
          no_output_timeout: 30m
      - run:
          name: Send migration results to  kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt || grep -q "No migrations are pending" ~/project/backend/migrations_dump.txt
            then
                # If you are using kvdb.io, generate the bucket ID "3CGwxq5apaCdRvB1ToTBdP" in your local terminal first
                echo "migration_${CIRCLE_WORKFLOW_ID:0:7} done"
                curl --insecure https://kvdb.io/3CGwxq5apaCdRvB1ToTBdP/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment
      - revert-migrations   

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - attach_workspace:
          at: ~/
      - install-aws-cli-1
      - run:
          name: Install dependencies (tar , gzip)
          command: |
            sudo apt-get install tar gzip
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
    
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment 
      - revert-migrations    
                    
  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - add_ssh_keys:
          fingerprints: ["c7:a1:83:a9:f7:78:fe:6e:8c:e3:d5:10:7d:77:01:18"]
      - attach_workspace:
          at: ~/
      - install-aws-cli-1
      - run:
          name: Install dependencies (python)
          command: |
            sudo apt-get install python3
      - run:
          name: Install dependencies (ansible tar gzip)
          command: |
            sudo apt-get install ansible tar gzip
      - run:
          name: Build backend
          command: |
            cd backend
            npm i
            npm run build
      - run:
          name: Zip backend
          command: |
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            ls
            cp ./artifact.tar.gz .circleci/ansible/roles/deploy/files
            ls .circleci/ansible/roles/deploy/files
      - run:
          name: Depoly using Ansible
          command: |
            cd .circleci/ansible
            ls roles/deploy/files
            cat inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt deploy-backend.yml
      - destroy-environment 
      - revert-migrations

  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - install-aws-cli-1
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              exit 0
            else
              exit 1
            fi
      - destroy-environment 
      - revert-migrations  

  cloudfront-update:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - install-aws-cli-2
      - run:
          name: Get old work flow - ids
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text) 
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt

            #save old work flow id using kvid

            curl --insecure https://kvdb.io/3CGwxq5apaCdRvB1ToTBdP/oldworkflowid_${CIRCLE_WORKFLOW_ID:0:7}  -d "${OldWorkflowID}"

      - run:
          name: Update cloudfront distribution
          command: |
            
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name "InitialStack" \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

            echo OldWorkflowID: "${OldWorkflowID}"
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment 
      - revert-migrations

  cleanup:
    docker:
      # - image: circleci/node:13.8.0
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      # - install-aws-cli-2
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            
            # Fetch the Old workflow ID from kyiv

            export OldWorkflowID=$(curl --insecure https://kvdb.io/3CGwxq5apaCdRvB1ToTBdP/oldworkflowid_${CIRCLE_WORKFLOW_ID:0:7})
           
            
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"

            #save oldworkflowID to a file
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt


    
      - run:
          name: Remove old stacks and files
          command: |
            
            ls 
            export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            echo OldWorkflowID: "${OldWorkflowID}"

            # if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "__________ Cleanup Confirmed ____________"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "__________ Cannot Cleanup ____________"
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]